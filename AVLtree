#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <windows.h>

// all the basic data structures and functions are included in this template
// you can add your own auxiliary functions as you like

// data type for avl tree nodes
typedef struct AVLTreeNode {
    int key; //key of this item
    int value;  //value (int) of this item
    int height; //height of the subtree rooted at this node
    struct AVLTreeNode *parent; //pointer to parent
    struct AVLTreeNode *left; //pointer to left child
    struct AVLTreeNode *right; //pointer to right child
} AVLTreeNode;

//data type for AVL trees
typedef struct AVLTree {
    int size;      // count of items in avl tree
    AVLTreeNode *root; // root
} AVLTree;

// create a new AVLTreeNode
AVLTreeNode *newAVLTreeNode(int k, int v) {
    AVLTreeNode *new;
    new = malloc(sizeof(AVLTreeNode));
    assert(new != NULL);
    new->key = k;
    new->value = v;
    new->height = 0; // height of this new node is set to 0
    new->left = NULL; // this node has no child
    new->right = NULL;
    new->parent = NULL; // no parent
    return new;
}

// create a new empty avl tree
AVLTree *newAVLTree() {
    AVLTree *T;
    T = malloc(sizeof(AVLTree));
    assert (T != NULL);
    T->size = 0;
    T->root = NULL;
    return T;
}

int treeHeight(struct AVLTreeNode *node) {
    if (node == NULL) {
        return 0;
    } else {
        int left = 0;
        if (node->left != NULL) {
            left = node->left->height;
        }

        int right = 0;
        if (node->right != NULL) {
            right = node->right->height;
        }
        return max(left, right) + 1;
    }
}

int BalanceFactor(AVLTreeNode *node) {
    if (node != NULL) {
        return treeHeight(node->left) - treeHeight(node->right);
    }
}

AVLTreeNode *RotateR(AVLTreeNode *node) {
    AVLTreeNode *x = node->left;
    AVLTreeNode *t2 = x->right;
    x->right = node;
    node->left = t2;
    node->height = treeHeight(node);
    x->height = treeHeight(x);
    return x;
}

AVLTreeNode *RotateL(AVLTreeNode *node) {
    AVLTreeNode *y = node->right;
    AVLTreeNode *t2 = y->left;
    y->left = node;
    node->right = t2;
    node->height = treeHeight(node);
    y->height = treeHeight(y);
    return y;
}


int compare(int k, int v, int key, int value) {
    int re = 0;
    if (k == key) {
        if (v == value) {
            re = 0;
        } else if (v < value) {
            re = -1;
        } else {
            re = 1;
        }
    } else if (k < key) {
        re = -1;
    } else {
        re = 1;
    }
    return re;
}


AVLTreeNode *ReBalance(AVLTreeNode *node, int k, int v) {
    int factor = BalanceFactor(node);
    int result;
    if (factor > 1) {
        result = compare(k, v, node->left->key, node->left->value);
        if (result > 0) {
            node->left = RotateL(node->left);
        }
        node = RotateR(node);
    } else if (factor < -1) {
        result = compare(k, v, node->right->key, node->right->value);
        if (result < 0) {
            node->right = RotateR(node->right);
        }
        node = RotateL(node);
    }
    return node;
}


AVLTreeNode *Insert(struct AVLTreeNode *node, int k, int v) {
    if (node == NULL) {
        node = newAVLTreeNode(k, v);
    } else {
        int result = compare(k, v, node->key, node->value);
        if (result < 0) {
            node->left = Insert(node->left, k, v);
        } else if (result > 0) {
            node->right = Insert(node->right, k, v);
        } else {
            return node;
        }
    }
    node = ReBalance(node, k, v);
    node->height = treeHeight(node);
    return node;
}


AVLTreeNode *CloneNode(AVLTreeNode *node) {
    if (node == NULL) {
        return NULL;
    } else {
        AVLTreeNode *c = newAVLTreeNode(node->key, node->value);
        c->height = node->height;
        c->left = CloneNode(node->left);
        c->right = CloneNode(node->right);
        return c;
    }
}

//  O(n)
AVLTree *CloneAVLTree(AVLTree *T) {
    AVLTree *T1 = newAVLTree();
    T1->root = CloneNode(T->root);
    T1->size = T->size;
    return T1;

}

AVLTreeNode *SearchNode(AVLTreeNode *node, int k, int v) {
    if (node != NULL) {
        int result = compare(k, v, node->key, node->value);
        if (result == 0) {
            return node;
        } else if (result < 0) {
            return SearchNode(node->left, k, v);
        } else if (result > 0) {
            return SearchNode(node->right, k, v);
        }
    } else {
        return NULL;
    }
}

//  O(n)
AVLTreeNode *Search(AVLTree *T, int k, int v) {
    if (T != NULL && T->size>0) {
        return SearchNode(T->root, k, v);
    }else{
        return NULL;
    }
}

//  O(n)
AVLTree *CreateAVLTree(const char *filename) {

    if (!strcmp(filename, "stdin")) {
        char buff[1024];
        char* token;
        int input1;
        int input2;
        struct AVLTree *Tree = newAVLTree();
        fgets(buff, sizeof buff, stdin);
        token = strtok(buff, ") ");
        while ((NULL != token) && (buff[0] != '\n')) {
            if (strncmp(buff, "end", 3) == 0) {
                break;
            }
            if (sscanf(token, "%*[(]%d%*[,]%d%*[)]%*c ", &input1, &input2) != 2) {
                puts("Invalid input!");
                exit(1);
            }
            Tree->root = Insert(Tree->root, input1, input2);
            Tree->size += 1;
            token = strtok(NULL, " ");
        }
        return Tree;
    } else {
        struct AVLTree *Tree = newAVLTree();
        int key;
        int value;
        FILE *fp = NULL;
        fp = fopen(filename, "r");
        if (fp == 0) {
            puts("No file!");
            exit(1);
        } else {
            while (fscanf(fp, " %*[(]%d%*[,]%d%*[)] ", &key, &value) != EOF) {
                Tree->root = Insert(Tree->root, key, value);
                Tree->size++;
            }
        }
        fclose(fp);
        return Tree;
    }
}


void storeInorder(AVLTreeNode *node, int *keys, int *values, int *index_ptr) {
    if (node == NULL) {
        return;
    }
    storeInorder(node->left, keys, values, index_ptr);
    keys[*index_ptr] = node->key;
    values[*index_ptr] = node->value;
    *index_ptr = *index_ptr + 1;
    storeInorder(node->right, keys, values, index_ptr);
}


void ArrUnion(int *keys1, int *keys2, int *values1, int *values2, int m, int n, int *t3_keys, int *t3_values, int *k) {
    int i = 0, j = 0, result = 0;
    while (i < m && j < n) {
        result = compare(keys1[i], values1[i], keys2[j], values2[j]);
        if (result < 0) {
            t3_keys[*k] = keys1[i];
            t3_values[*k] = values1[i];
            i++;
        } else if (result > 0) {
            t3_keys[*k] = keys2[j];
            t3_values[*k] = values2[j];
            j++;
        } else if (result == 0) {
            t3_keys[*k] = keys1[i];
            t3_values[*k] = values1[i];
            i++;
            j++;
        }
        *k = *k + 1;
    }
    while (i < m) {
        t3_keys[*k] = keys1[i];
        t3_values[*k] = values1[i];
        i++;
        *k = *k + 1;
    }
    while (j < n) {
        t3_keys[*k] = keys2[j];
        t3_values[*k] = values2[j];
        j++;
        *k = *k + 1;
    }
}

void ArrInser(int *keys1, int *keys2, int *values1, int *values2, int m, int n, int *t3_keys, int *t3_values, int *k) {
    int i = 0, j = 0, result = 0;
    while (i < m && j < n) {
        result = compare(keys1[i], values1[i], keys2[j], values2[j]);
        if (result < 0) {
            i++;
        } else if (result > 0) {
            j++;
        } else if (result == 0) {
            t3_keys[*k] = keys1[i];
            t3_values[*k] = values1[i];
            i++;
            j++;
            *k = *k + 1;
        }
    }
}

AVLTreeNode *sorteArrayToAVL(int *keys, int *values, int start, int end) {
    if (start > end) {
        return NULL;
    }
    int mid = (start + end) / 2;
    int key = keys[mid];
    int value = values[mid];
    AVLTreeNode *node = newAVLTreeNode(key, value);
    node->left = sorteArrayToAVL(keys, values, start, mid - 1);
    node->right = sorteArrayToAVL(keys, values, mid + 1, end);
    node->height = treeHeight(node);
    return node;
}


//  O(logn)
AVLTree *AVLTreesUnion(AVLTree *T1, AVLTree *T2) {
    if (T1 == NULL || T1->size == 0) {
        return CloneAVLTree(T2);
    }
    if (T2 == NULL || T2->size == 0) {
        return CloneAVLTree(T1);
    }
    int *t1_keys = malloc(T1->size * sizeof(int));
    int *t1_values = malloc(T1->size * sizeof(int));
    int i = 0;
    storeInorder(T1->root, t1_keys, t1_values, &i);

    int *t2_keys = malloc(T2->size * sizeof(int));
    int *t2_values = malloc(T2->size * sizeof(int));
    int j = 0;
    storeInorder(T2->root, t2_keys, t2_values, &j);

    int *t3_keys = malloc((T1->size + T2->size) * sizeof(int));
    int *t3_values = malloc((T1->size + T2->size) * sizeof(int));
    int k = 0;
    ArrUnion(t1_keys, t2_keys, t1_values, t2_values, T1->size, T2->size, t3_keys, t3_values, &k);

    AVLTree *new_tree = newAVLTree();
    new_tree->size = k + 1;
    new_tree->root = sorteArrayToAVL(t3_keys, t3_values, 0, k - 1);
    return new_tree;
}

//  O(logn)
AVLTree *AVLTreesIntersection(AVLTree *T1, AVLTree *T2) {
    if (T1 == NULL || T1->size == 0) {
        return CloneAVLTree(T2);
    }
    if (T2 == NULL || T2->size == 0) {
        return CloneAVLTree(T1);
    }
    int *t1_keys = malloc(T1->size * sizeof(int));
    int *t1_values = malloc(T1->size * sizeof(int));
    int i = 0;
    storeInorder(T1->root, t1_keys, t1_values, &i);

    int *t2_keys = malloc(T2->size * sizeof(int));
    int *t2_values = malloc(T2->size * sizeof(int));
    int j = 0;
    storeInorder(T2->root, t2_keys, t2_values, &j);

    int *t3_keys = malloc((T1->size + T2->size) * sizeof(int));
    int *t3_values = malloc((T1->size + T2->size) * sizeof(int));
    int k = 0;
    ArrInser(t1_keys, t2_keys, t1_values, t2_values, T1->size, T2->size, t3_keys, t3_values, &k);

    AVLTree *new_tree = newAVLTree();
    new_tree->size = k + 1;
    new_tree->root = sorteArrayToAVL(t3_keys, t3_values, 0, k - 1);
    return new_tree;
}


AVLTreeNode *searchpNode(AVLTreeNode *pnode, AVLTreeNode *node) {
    while (1) {
        if (node->left != NULL) {
            pnode = node;
            node = node->left;
        } else {
            break;
        }
    }
    return pnode;
}

AVLTreeNode *searchsNode(AVLTreeNode *node) {
    while (1) {
        if (node->left != NULL) {
            node = node->left;
        } else {
            break;
        }
    }
    return node;
}


AVLTreeNode *Delete(AVLTreeNode *node, int k, int v) {
    AVLTreeNode *sNode = NULL;
    AVLTreeNode *pNode = NULL;
    AVLTreeNode *temp = NULL;
    if (node == NULL) {
        exit(0);
    } else if (node->key < k) {
        node->right = Delete(node->right, k, v);
        if (treeHeight(node->left) - treeHeight(node->right) > 1) {
            temp = node->left;
            if (treeHeight(temp->left) >= treeHeight(temp->right)) {
                node = RotateR(node);
            } else {
                node->left = RotateL(node->left);
                node = RotateR(node);
            }
        }
        node->height = treeHeight(node);
    } else if (node->key > k) {
        node->left = Delete(node->left, k, v);
        if (treeHeight(node->right) - treeHeight(node->left) > 1) {
            temp = node->right;
            if (treeHeight(temp->right) >= treeHeight(temp->left)) {
                node = RotateL(node);
            } else {
                node->right = RotateR(node->right);
                node = RotateL(node);
            }
        }
        node->height = treeHeight(node);
    } else if (node->key == k) {
        if (node->right == NULL && node->left == NULL) {
            free(node);
            node = NULL;
        } else if (node->left == NULL && node->right != NULL) {
            temp = node->right;
            free(node);
            node = temp;
        } else if (node->left != NULL && node->right == NULL) {
            temp = node->left;
            free(node);
            node = temp;
        } else {
            sNode = searchsNode(node->right);
            pNode = searchpNode(node->right, node->right);
            if (node->right == sNode) {
                sNode->left = node->left;
                free(node);
                node = sNode;
            } else if (node->right != sNode && sNode->right == NULL) {
                sNode->left = node->left;
                sNode->right = node->right;
                pNode->left = NULL;
                free(node);
                node = sNode;
            } else if (node->right != sNode && sNode->right != NULL) {
                pNode->left = sNode->right;
                sNode->left = node->left;
                sNode->right = node->right;
                free(node);
                node = sNode;
            }
        }
        return node;
    }
}


//  O(logn)
int DeleteNode(AVLTree *T, int k, int v) {
    if (Search(T, k, v) != 0) {
        T->root = Delete(T->root, k, v);
        T->size = T->size-1;
        return 1;
    } else {
        return 0;
    }
}

//  O(n)
int InsertNode(AVLTree *T, int k, int v) {
    if (Search(T, k, v) == NULL) {
        T->root = Insert(T->root, k, v);
        T->size++;
        return 1;
    } else {
        return 0;
    }
}

//  O(n)
void free_AVLNode(AVLTreeNode *NT) {
    if (NT == NULL) {
        return;
    }
    if (NT->left != NULL) {
        free_AVLNode(NT->left);
    }
    if (NT->right != NULL) {
        free_AVLNode(NT->right);
    }
    free(NT);
}

void FreeAVLTree(AVLTree *T) {
    free_AVLNode(T->root);
    free(T);
}

//  O(n)
void PrintAVLNode(struct AVLTreeNode *node) {
    if (node != NULL) {
        PrintAVLNode(node->left);
        printf("(%d,%d),%d\n", node->key, node->value, node->height - 1);
        PrintAVLNode(node->right);
    }
}

void PrintAVLTree(AVLTree *T) {
    if (T->root == NULL) {
        printf("Empty Tree!\n");
    } else {
        PrintAVLNode(T->root);
        printf("////////////////////\n");
    }
}

int main() //sample main for testing
{
    int i, j;
    AVLTree *tree1, *tree2, *tree3, *tree4, *tree5, *tree6, *tree7, *tree8;
    AVLTreeNode *node1;

    tree1 = CreateAVLTree("stdin");
    PrintAVLTree(tree1);
    FreeAVLTree(tree1);
    //you need to create the text file file1.txt
    // to store a set of items without duplicate items
    tree2 = CreateAVLTree("File1.txt");
    PrintAVLTree(tree2);
    tree3 = CloneAVLTree(tree2);
    PrintAVLTree(tree3);
    FreeAVLTree(tree2);
    FreeAVLTree(tree3);
    //Create tree4
    tree4 = newAVLTree();
    j = InsertNode(tree4, 10, 10);
    for (i = 0; i < 15; i++) {
        j = InsertNode(tree4, i, i);
        if (j == 0) printf("(%d, %d) already exists\n", i, i);
    }
    PrintAVLTree(tree4);
    node1 = Search(tree4, 20, 20);
    if (node1 != NULL)
        printf("key= %d value= %d\n", node1->key, node1->value);
    else
        printf("Key 20 does not exist\n");
    for (i = 17; i > 0; i--) {
        j = DeleteNode(tree4, i, i);
        if (j == 0)
            printf("Key %d does not exist\n", i);
        PrintAVLTree(tree4);
    }
    FreeAVLTree(tree4);
    //Create tree5
    tree5 = newAVLTree();
    j = InsertNode(tree5, 6, 25);
    j = InsertNode(tree5, 6, 10);
    j = InsertNode(tree5, 6, 12);
    j = InsertNode(tree5, 6, 20);
    j = InsertNode(tree5, 9, 25);
    j = InsertNode(tree5, 10, 25);
    PrintAVLTree(tree5);
    //Create tree6
    tree6 = newAVLTree();
    j = InsertNode(tree6, 6, 25);
    j = InsertNode(tree6, 5, 10);
    j = InsertNode(tree6, 6, 12);
    j = InsertNode(tree6, 6, 20);
    j = InsertNode(tree6, 8, 35);
    j = InsertNode(tree6, 10, 25);
    PrintAVLTree(tree6);
    tree7 = AVLTreesIntersection(tree5, tree6);
    tree8 = AVLTreesUnion(tree5, tree6);
    PrintAVLTree(tree7);
    PrintAVLTree(tree8);
    return 0;
}
